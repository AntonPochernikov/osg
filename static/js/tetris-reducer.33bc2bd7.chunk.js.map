{"version":3,"sources":["reducers/tetris/board.js","libs/figures/Figure.js","libs/figures/FigureI.js","libs/figures/FigureJ.js","libs/figures/FigureL.js","libs/figures/FigureO.js","libs/figures/FigureS.js","libs/figures/FigureT.js","libs/figures/FigureZ.js","libs/figures/getRandomFigure.js","reducers/tetris/figure.js","reducers/tetris/index.js"],"names":["tetrisConfig","board","cols","rows","handleActions","_handleActions","Object","defineProperty","action","stopGame","createField","startGame","collideFigure","state","_ref","figureCells","payload","currentFigure","getCells","map","tr","cell","find","c","haveSameCoordinates","selectCompletedRow","_ref2","rowIndex","first","slice","rest","concat","toConsumableArray","createIndeterminateRow","removeCompletedRow","_ref3","r","moveCelldown","createClearRow","Figure","head","arguments","length","undefined","consCell","direction","classCallCheck","this","FigureI","alignment","getSize","rotate","x","y","_getCoordinates","getCoordinates","_getCoordinates2","slicedToArray","headX","headY","move","down","startHead","result","_getCoordinates3","_getCoordinates4","push","height","width","right","_getCoordinates5","_getCoordinates6","FigureJ","left","up","_getCoordinates7","_getCoordinates8","_getCoordinates9","_getCoordinates10","FigureL","FigureO","normal","FigureS","FigureT","FigureZ","consFigure","dir","sample","keys","getRandomDirection","figures","getRandomFigure","figureInit","current","next","figure_handleActions","setCurrentFigure","objectSpread","setNextFigure","moveFigureDown","moveDown","moveFigureLeft","moveLeft","moveFigureRight","moveRight","rotateFigure","fallFigureDown","speed","min","max","init","score","collision","completedRow","gameState","tetris_handleActions","finishGame","pauseGame","resumeGame","_handleActions2","increaseGameSpeed","decreaseGameSpeed","_handleActions3","modificator","combineReducers","figure"],"mappings":"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","file":"static/js/tetris-reducer.33bc2bd7.chunk.js","sourcesContent":["import { handleActions } from 'redux-actions';\r\nimport * as action from 'actions';\r\nimport { createField, createClearRow, createIndeterminateRow } from 'libs/createField.js';\r\nimport { haveSameCoordinates, moveDown as moveCelldown } from 'libs/cell.js';\r\nimport { tetrisConfig } from 'constants/config.js';\r\n\r\nconst { board: { cols, rows } } = tetrisConfig;\r\n\r\nexport default handleActions({\r\n  [action.tetris.stopGame]: () => createField(cols, rows),\r\n  [action.tetris.startGame]: () => createField(cols, rows),\r\n  [action.tetris.collideFigure]: (state, { payload: { currentFigure } }) => {\r\n    const figureCells = currentFigure.getCells();\r\n    return state.map(tr => tr.map((cell) => {\r\n      const commonCell = figureCells.find(c => haveSameCoordinates(c, cell));\r\n      return commonCell || cell;\r\n    }));\r\n  },\r\n  [action.tetris.selectCompletedRow]: (state, { payload: { rowIndex } }) => {\r\n    const first = state.slice(0, rowIndex);\r\n    const rest = state.slice(rowIndex + 1);\r\n    return [...first, createIndeterminateRow(cols, rowIndex), ...rest];\r\n  },\r\n  [action.tetris.removeCompletedRow]: (state, { payload: { rowIndex } }) => {\r\n    const first = state\r\n      .slice(0, rowIndex)\r\n      .map(r => r.map(c => moveCelldown(c)));\r\n    const rest = state.slice(rowIndex + 1);\r\n    return [createClearRow(cols, 0), ...first, ...rest];\r\n  },\r\n}, createField(cols, rows));\r\n","import { cons as consCell } from 'libs/cell.js';\n\nexport default class Figure {\n  constructor(head = consCell([0, 0]), direction = 'down') {\n    this.head = head;\n    this.direction = direction;\n  }\n\n  getCells() {\n    return [];\n  }\n}\n","import { cons as consCell, getCoordinates } from 'libs/cell.js';\nimport Figure from './Figure.js';\n\nexport default class FigureI extends Figure {\n  static alignment = {\n    down: {\n      direction: 'down',\n      startHead: consCell([5, 0], 'filled'),\n      rotate: head => new FigureI(head, 'right'),\n      getCells: (head) => {\n        const result = [];\n        const [headX, headY] = getCoordinates(head);\n        for (let y = headY; y < headY + 4; y += 1) {\n          result.push(consCell([headX, y], 'filled'));\n        }\n        return result;\n      },\n      getSize: () => ({ height: 4, width: 1 }),\n    },\n    right: {\n      direction: 'right',\n      startHead: consCell([5, 0], 'filled'),\n      rotate: head => new FigureI(head, 'down'),\n      getCells: (head) => {\n        const result = [];\n        const [headX, headY] = getCoordinates(head);\n        for (let x = headX - 2; x < headX + 2; x += 1) {\n          result.push(consCell([x, headY], 'filled'));\n        }\n        return result;\n      },\n      getSize: () => ({ height: 1, width: 4 }),\n    },\n  }\n\n  #type = 'I';\n\n  getSize() {\n    return FigureI.alignment[this.direction].getSize();\n  }\n\n  getCells() {\n    return FigureI.alignment[this.direction].getCells(this.head);\n  }\n\n  rotate() {\n    return FigureI.alignment[this.direction].rotate(this.head);\n  }\n\n  setPosition(x, y) {\n    return new FigureI(consCell([x, y], 'filled'), this.direction);\n  }\n\n  move(x, y) {\n    const [headX, headY] = getCoordinates(this.head);\n    return new FigureI(consCell([headX + x, headY + y], 'filled'), this.direction);\n  }\n\n  moveDown() {\n    return this.move(0, 1);\n  }\n\n  moveLeft() {\n    return this.move(-1, 0);\n  }\n\n  moveRight() {\n    return this.move(1, 0);\n  }\n}\n","import { cons as consCell, getCoordinates } from 'libs/cell.js';\nimport Figure from './Figure.js';\n\nexport default class FigureJ extends Figure {\n  static alignment = {\n    down: {\n      direction: 'down',\n      startHead: consCell([5, 0], 'filled'),\n      rotate: head => new FigureJ(head, 'left'),\n      getCells: (head) => {\n        const result = [];\n        const [headX, headY] = getCoordinates(head);\n        result.push(consCell([headX - 1, headY], 'filled'));\n        result.push(consCell([headX - 1, headY + 1], 'filled'));\n        result.push(consCell([headX, headY + 1], 'filled'));\n        result.push(consCell([headX + 1, headY + 1], 'filled'));\n        return result;\n      },\n      getSize: () => ({ height: 2, width: 3 }),\n    },\n    left: {\n      direction: 'left',\n      startHead: consCell([5, 0], 'filled'),\n      rotate: head => new FigureJ(head, 'up'),\n      getCells: (head) => {\n        const result = [];\n        const [headX, headY] = getCoordinates(head);\n        result.push(consCell([headX - 1, headY], 'filled'));\n        result.push(consCell([headX - 1, headY + 1], 'filled'));\n        result.push(consCell([headX - 1, headY + 2], 'filled'));\n        result.push(consCell([headX, headY], 'filled'));\n        return result;\n      },\n      getSize: () => ({ height: 3, width: 2 }),\n    },\n    up: {\n      direction: 'up',\n      startHead: consCell([5, 0], 'filled'),\n      rotate: head => new FigureJ(head, 'right'),\n      getCells: (head) => {\n        const result = [];\n        const [headX, headY] = getCoordinates(head);\n        result.push(consCell([headX + 1, headY + 1], 'filled'));\n        result.push(consCell([headX - 1, headY], 'filled'));\n        result.push(consCell([headX, headY], 'filled'));\n        result.push(consCell([headX + 1, headY], 'filled'));\n        return result;\n      },\n      getSize: () => ({ height: 2, width: 3 }),\n    },\n    right: {\n      direction: 'right',\n      startHead: consCell([5, 0], 'filled'),\n      rotate: head => new FigureJ(head, 'down'),\n      getCells: (head) => {\n        const result = [];\n        const [headX, headY] = getCoordinates(head);\n        result.push(consCell([headX, headY], 'filled'));\n        result.push(consCell([headX, headY + 1], 'filled'));\n        result.push(consCell([headX, headY + 2], 'filled'));\n        result.push(consCell([headX - 1, headY + 2], 'filled'));\n        return result;\n      },\n      getSize: () => ({ height: 3, width: 2 }),\n    },\n  };\n\n  #type = 'J';\n\n  getSize() {\n    return FigureJ.alignment[this.direction].getSize();\n  }\n\n  getCells() {\n    return FigureJ.alignment[this.direction].getCells(this.head);\n  }\n\n  rotate() {\n    return FigureJ.alignment[this.direction].rotate(this.head);\n  }\n\n  setPosition(x, y) {\n    return new FigureJ(consCell([x, y], 'filled'), this.direction);\n  }\n\n  move(x, y) {\n    const [headX, headY] = getCoordinates(this.head);\n    return new FigureJ(consCell([headX + x, headY + y], 'filled'), this.direction);\n  }\n\n  moveDown() {\n    return this.move(0, 1);\n  }\n\n  moveLeft() {\n    return this.move(-1, 0);\n  }\n\n  moveRight() {\n    return this.move(1, 0);\n  }\n}\n","import { cons as consCell, getCoordinates } from 'libs/cell.js';\nimport Figure from './Figure.js';\n\nexport default class FigureL extends Figure {\n  static alignment = {\n    down: {\n      direction: 'down',\n      startHead: consCell([5, 0], 'filled'),\n      rotate: head => new FigureL(head, 'left'),\n      getCells: (head) => {\n        const result = [];\n        const [headX, headY] = getCoordinates(head);\n        result.push(consCell([headX + 1, headY], 'filled'));\n        result.push(consCell([headX - 1, headY + 1], 'filled'));\n        result.push(consCell([headX, headY + 1], 'filled'));\n        result.push(consCell([headX + 1, headY + 1], 'filled'));\n        return result;\n      },\n      getSize: () => ({ height: 2, width: 3 }),\n    },\n    left: {\n      direction: 'left',\n      startHead: consCell([5, 0], 'filled'),\n      rotate: head => new FigureL(head, 'up'),\n      getCells: (head) => {\n        const result = [];\n        const [headX, headY] = getCoordinates(head);\n        result.push(consCell([headX - 1, headY], 'filled'));\n        result.push(consCell([headX - 1, headY + 1], 'filled'));\n        result.push(consCell([headX - 1, headY + 2], 'filled'));\n        result.push(consCell([headX, headY + 2], 'filled'));\n        return result;\n      },\n      getSize: () => ({ height: 3, width: 2 }),\n    },\n    up: {\n      direction: 'up',\n      startHead: consCell([5, 0], 'filled'),\n      rotate: head => new FigureL(head, 'right'),\n      getCells: (head) => {\n        const result = [];\n        const [headX, headY] = getCoordinates(head);\n        result.push(consCell([headX - 1, headY + 1], 'filled'));\n        result.push(consCell([headX - 1, headY], 'filled'));\n        result.push(consCell([headX, headY], 'filled'));\n        result.push(consCell([headX + 1, headY], 'filled'));\n        return result;\n      },\n      getSize: () => ({ height: 2, width: 3 }),\n    },\n    right: {\n      direction: 'right',\n      startHead: consCell([5, 0], 'filled'),\n      rotate: head => new FigureL(head, 'down'),\n      getCells: (head) => {\n        const result = [];\n        const [headX, headY] = getCoordinates(head);\n        result.push(consCell([headX, headY], 'filled'));\n        result.push(consCell([headX, headY + 1], 'filled'));\n        result.push(consCell([headX, headY + 2], 'filled'));\n        result.push(consCell([headX - 1, headY], 'filled'));\n        return result;\n      },\n      getSize: () => ({ height: 3, width: 2 }),\n    },\n  };\n\n  #type = 'L';\n\n  getSize() {\n    return FigureL.alignment[this.direction].getSize();\n  }\n\n  getCells() {\n    return FigureL.alignment[this.direction].getCells(this.head);\n  }\n\n  rotate() {\n    return FigureL.alignment[this.direction].rotate(this.head);\n  }\n\n  setPosition(x, y) {\n    return new FigureL(consCell([x, y], 'filled'), this.direction);\n  }\n\n  move(x, y) {\n    const [headX, headY] = getCoordinates(this.head);\n    return new FigureL(consCell([headX + x, headY + y], 'filled'), this.direction);\n  }\n\n  moveDown() {\n    return this.move(0, 1);\n  }\n\n  moveLeft() {\n    return this.move(-1, 0);\n  }\n\n  moveRight() {\n    return this.move(1, 0);\n  }\n}\n","import { cons as consCell, getCoordinates } from 'libs/cell.js';\nimport Figure from './Figure.js';\n\nexport default class FigureO extends Figure {\n  static alignment = {\n    normal: {\n      direction: 'normal',\n      startHead: consCell([5, 0], 'filled'),\n      getCells: (head) => {\n        const result = [];\n        const [headX, headY] = getCoordinates(head);\n        result.push(consCell([headX, headY], 'filled'));\n        result.push(consCell([headX - 1, headY], 'filled'));\n        result.push(consCell([headX, headY + 1], 'filled'));\n        result.push(consCell([headX - 1, headY + 1], 'filled'));\n        return result;\n      },\n      getSize: () => ({ height: 2, width: 2 }),\n    },\n  };\n\n  #type = 'O';\n\n  getSize() {\n    return FigureO.alignment[this.direction].getSize();\n  }\n\n  getCells() {\n    return FigureO.alignment[this.direction].getCells(this.head);\n  }\n\n  rotate() {\n    return this;\n  }\n\n  setPosition(x, y) {\n    return new FigureO(consCell([x, y], 'filled'), this.direction);\n  }\n\n  move(x, y) {\n    const [headX, headY] = getCoordinates(this.head);\n    return new FigureO(consCell([headX + x, headY + y], 'filled'), this.direction);\n  }\n\n  moveDown() {\n    return this.move(0, 1);\n  }\n\n  moveLeft() {\n    return this.move(-1, 0);\n  }\n\n  moveRight() {\n    return this.move(1, 0);\n  }\n}\n","import { cons as consCell, getCoordinates } from 'libs/cell.js';\nimport Figure from './Figure.js';\n\nexport default class FigureS extends Figure {\n  static alignment = {\n    down: {\n      direction: 'down',\n      startHead: consCell([5, 0], 'filled'),\n      rotate: head => new FigureS(head, 'left'),\n      getCells: (head) => {\n        const result = [];\n        const [headX, headY] = getCoordinates(head);\n        result.push(consCell([headX, headY], 'filled'));\n        result.push(consCell([headX - 1, headY + 1], 'filled'));\n        result.push(consCell([headX, headY + 1], 'filled'));\n        result.push(consCell([headX + 1, headY], 'filled'));\n        return result;\n      },\n      getSize: () => ({ height: 2, width: 3 }),\n    },\n    left: {\n      direction: 'left',\n      startHead: consCell([5, 0], 'filled'),\n      rotate: head => new FigureS(head, 'down'),\n      getCells: (head) => {\n        const result = [];\n        const [headX, headY] = getCoordinates(head);\n        result.push(consCell([headX - 1, headY], 'filled'));\n        result.push(consCell([headX - 1, headY + 1], 'filled'));\n        result.push(consCell([headX, headY + 1], 'filled'));\n        result.push(consCell([headX, headY + 2], 'filled'));\n        return result;\n      },\n      getSize: () => ({ height: 3, width: 2 }),\n    },\n  };\n\n  #type = 'S';\n\n  getSize() {\n    return FigureS.alignment[this.direction].getSize();\n  }\n\n  getCells() {\n    return FigureS.alignment[this.direction].getCells(this.head);\n  }\n\n  rotate() {\n    return FigureS.alignment[this.direction].rotate(this.head);\n  }\n\n  setPosition(x, y) {\n    return new FigureS(consCell([x, y], 'filled'), this.direction);\n  }\n\n  move(x, y) {\n    const [headX, headY] = getCoordinates(this.head);\n    return new FigureS(consCell([headX + x, headY + y], 'filled'), this.direction);\n  }\n\n  moveDown() {\n    return this.move(0, 1);\n  }\n\n  moveLeft() {\n    return this.move(-1, 0);\n  }\n\n  moveRight() {\n    return this.move(1, 0);\n  }\n}\n","import { cons as consCell, getCoordinates } from 'libs/cell.js';\nimport Figure from './Figure.js';\n\nexport default class FigureT extends Figure {\n  static alignment = {\n    down: {\n      direction: 'down',\n      startHead: consCell([5, 0], 'filled'),\n      rotate: head => new FigureT(head, 'left'),\n      getCells: (head) => {\n        const result = [];\n        const [headX, headY] = getCoordinates(head);\n        result.push(consCell([headX, headY], 'filled'));\n        result.push(consCell([headX - 1, headY + 1], 'filled'));\n        result.push(consCell([headX, headY + 1], 'filled'));\n        result.push(consCell([headX + 1, headY + 1], 'filled'));\n        return result;\n      },\n      getSize: () => ({ height: 2, width: 3 }),\n    },\n    left: {\n      direction: 'left',\n      startHead: consCell([5, 0], 'filled'),\n      rotate: head => new FigureT(head, 'up'),\n      getCells: (head) => {\n        const result = [];\n        const [headX, headY] = getCoordinates(head);\n        result.push(consCell([headX, headY], 'filled'));\n        result.push(consCell([headX, headY + 1], 'filled'));\n        result.push(consCell([headX, headY + 2], 'filled'));\n        result.push(consCell([headX + 1, headY + 1], 'filled'));\n        return result;\n      },\n      getSize: () => ({ height: 3, width: 2 }),\n    },\n    up: {\n      direction: 'up',\n      startHead: consCell([5, 0], 'filled'),\n      rotate: head => new FigureT(head, 'right'),\n      getCells: (head) => {\n        const result = [];\n        const [headX, headY] = getCoordinates(head);\n        result.push(consCell([headX, headY + 1], 'filled'));\n        result.push(consCell([headX - 1, headY], 'filled'));\n        result.push(consCell([headX, headY], 'filled'));\n        result.push(consCell([headX + 1, headY], 'filled'));\n        return result;\n      },\n      getSize: () => ({ height: 2, width: 3 }),\n    },\n    right: {\n      direction: 'right',\n      startHead: consCell([5, 0], 'filled'),\n      rotate: head => new FigureT(head, 'down'),\n      getCells: (head) => {\n        const result = [];\n        const [headX, headY] = getCoordinates(head);\n        result.push(consCell([headX, headY], 'filled'));\n        result.push(consCell([headX, headY + 1], 'filled'));\n        result.push(consCell([headX, headY + 2], 'filled'));\n        result.push(consCell([headX - 1, headY + 1], 'filled'));\n        return result;\n      },\n      getSize: () => ({ height: 3, width: 2 }),\n    },\n  };\n\n  #type = 'T';\n\n  getSize() {\n    return FigureT.alignment[this.direction].getSize();\n  }\n\n  getCells() {\n    return FigureT.alignment[this.direction].getCells(this.head);\n  }\n\n  rotate() {\n    return FigureT.alignment[this.direction].rotate(this.head);\n  }\n\n  setPosition(x, y) {\n    return new FigureT(consCell([x, y], 'filled'), this.direction);\n  }\n\n  move(x, y) {\n    const [headX, headY] = getCoordinates(this.head);\n    return new FigureT(consCell([headX + x, headY + y], 'filled'), this.direction);\n  }\n\n  moveDown() {\n    return this.move(0, 1);\n  }\n\n  moveLeft() {\n    return this.move(-1, 0);\n  }\n\n  moveRight() {\n    return this.move(1, 0);\n  }\n}\n","import { cons as consCell, getCoordinates } from 'libs/cell.js';\nimport Figure from './Figure.js';\n\nexport default class FigureZ extends Figure {\n  static alignment = {\n    down: {\n      direction: 'down',\n      startHead: consCell([5, 0], 'filled'),\n      rotate: head => new FigureZ(head, 'left'),\n      getCells: (head) => {\n        const result = [];\n        const [headX, headY] = getCoordinates(head);\n        result.push(consCell([headX, headY], 'filled'));\n        result.push(consCell([headX - 1, headY], 'filled'));\n        result.push(consCell([headX, headY + 1], 'filled'));\n        result.push(consCell([headX + 1, headY + 1], 'filled'));\n        return result;\n      },\n      getSize: () => ({ height: 2, width: 3 }),\n    },\n    left: {\n      direction: 'left',\n      startHead: consCell([5, 0], 'filled'),\n      rotate: head => new FigureZ(head, 'down'),\n      getCells: (head) => {\n        const result = [];\n        const [headX, headY] = getCoordinates(head);\n        result.push(consCell([headX, headY], 'filled'));\n        result.push(consCell([headX - 1, headY + 1], 'filled'));\n        result.push(consCell([headX, headY + 1], 'filled'));\n        result.push(consCell([headX - 1, headY + 2], 'filled'));\n        return result;\n      },\n      getSize: () => ({ height: 3, width: 2 }),\n    },\n  };\n\n  #type = 'Z';\n\n  getSize() {\n    return FigureZ.alignment[this.direction].getSize();\n  }\n\n  getCells() {\n    return FigureZ.alignment[this.direction].getCells(this.head);\n  }\n\n  rotate() {\n    return FigureZ.alignment[this.direction].rotate(this.head);\n  }\n\n  setPosition(x, y) {\n    return new FigureZ(consCell([x, y], 'filled'), this.direction);\n  }\n\n  move(x, y) {\n    const [headX, headY] = getCoordinates(this.head);\n    return new FigureZ(consCell([headX + x, headY + y], 'filled'), this.direction);\n  }\n\n  moveDown() {\n    return this.move(0, 1);\n  }\n\n  moveLeft() {\n    return this.move(-1, 0);\n  }\n\n  moveRight() {\n    return this.move(1, 0);\n  }\n}\n","import { keys, sample } from 'lodash';\nimport FigureI from './FigureI.js';\nimport FigureJ from './FigureJ.js';\nimport FigureL from './FigureL.js';\nimport FigureO from './FigureO.js';\nimport FigureS from './FigureS.js';\nimport FigureT from './FigureT.js';\nimport FigureZ from './FigureZ.js';\n\nconst getRandomDirection = Figure => sample(keys(Figure.alignment));\n\nconst consFigure = Figure => () => {\n  const dir = getRandomDirection(Figure);\n  return new Figure(Figure.alignment[dir].startHead, dir);\n};\n\nconst figures = [\n  consFigure(FigureI),\n  consFigure(FigureJ),\n  consFigure(FigureL),\n  consFigure(FigureO),\n  consFigure(FigureS),\n  consFigure(FigureT),\n  consFigure(FigureZ),\n];\n\nexport default () => sample(figures)();\n","import { handleActions } from 'redux-actions';\r\nimport * as action from 'actions';\r\nimport getRandomFigure from 'libs/figures/getRandomFigure.js';\r\n\r\nconst figureInit = {\r\n  current: null,\r\n  next: null,\r\n};\r\n\r\nexport default handleActions({\r\n  [action.tetris.setCurrentFigure]: state => ({\r\n    ...state,\r\n    current: state.next || getRandomFigure(),\r\n  }),\r\n  [action.tetris.setNextFigure]: state => ({\r\n    ...state,\r\n    next: getRandomFigure(),\r\n  }),\r\n  [action.tetris.collideFigure]: state => ({\r\n    ...state,\r\n    current: null,\r\n  }),\r\n  [action.tetris.moveFigureDown]: state => ({\r\n    ...state,\r\n    current: state.current.moveDown(),\r\n  }),\r\n  [action.tetris.moveFigureLeft]: state => ({\r\n    ...state,\r\n    current: state.current.moveLeft(),\r\n  }),\r\n  [action.tetris.moveFigureRight]: state => ({\r\n    ...state,\r\n    current: state.current.moveRight(),\r\n  }),\r\n  [action.tetris.rotateFigure]: state => ({\r\n    ...state,\r\n    current: state.current.rotate(),\r\n  }),\r\n  [action.tetris.fallFigureDown]: state => ({\r\n    ...state,\r\n    current: state.current.moveDown(),\r\n  }),\r\n  [action.tetris.stopGame]: () => figureInit,\r\n}, figureInit);\r\n","import { combineReducers } from 'redux';\r\nimport { handleActions } from 'redux-actions';\r\nimport * as action from 'actions';\r\nimport { tetrisConfig } from 'constants/config.js';\r\nimport board from './board.js';\r\nimport figure from './figure.js';\r\n\r\nconst { speed: { min, max, init }, score: { collision, completedRow } } = tetrisConfig;\r\n\r\nconst gameState = handleActions({\r\n  [action.tetris.startGame]: () => 'started',\r\n  [action.tetris.stopGame]: () => 'initial',\r\n  [action.tetris.finishGame]: () => 'finished',\r\n  [action.tetris.pauseGame]: () => 'paused',\r\n  [action.tetris.resumeGame]: () => 'started',\r\n}, 'initial');\r\n\r\nconst speed = handleActions({\r\n  [action.tetris.increaseGameSpeed]: state => (state === max ? state : state + 1),\r\n  [action.tetris.decreaseGameSpeed]: state => (state === min ? state : state - 1),\r\n}, init);\r\n\r\nconst score = handleActions({\r\n  // speed declared above so no destructuring here\r\n  [action.tetris.collideFigure]: (state, { payload }) => state + collision * payload.speed,\r\n  [action.tetris.removeCompletedRow]: (state, { payload: { modificator } }) => state + completedRow * modificator,\r\n  [action.tetris.startGame]: () => 0,\r\n  [action.tetris.stopGame]: () => 0,\r\n}, 0);\r\n\r\nexport default combineReducers({\r\n  gameState,\r\n  board,\r\n  figure,\r\n  speed,\r\n  score,\r\n});\r\n"],"sourceRoot":""}