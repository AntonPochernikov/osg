{"version":3,"sources":["modules/user/reducers/index.js","modules/user/sagas/loginFlow.js","modules/user/sagas/index.js","libs/sleep.js","modules/tetris/sagas/tetrisFlow.js","modules/tetris/sagas/index.js","modules/snake/libs/isAllowedDirection.js","modules/snake/libs/generateApple.js","modules/snake/sagas/snakeFlow.js","modules/snake/sagas/index.js","modules/main/sagas/index.js","store/index.js","modules/common/components/ProgressBar/index.jsx","modules/common/components/PageLoader.jsx","constants/environment.js","modules/main/components/LazyRoutes.js","modules/main/components/MainRouter.jsx","serviceWorker.js","index.js","App.jsx","libs/times.js","modules/tetris/selectors/index.js","modules/snake/selectors/index.js","modules/main/selectors/index.js","modules/snake/constants/config.js","modules/snake/constants/snakeGrid.js","libs/createGrid.js","modules/tetris/constants/config.js","modules/common/components/Header/index.jsx","modules/snake/libs/generateNextCell.js","libs/cell.js","modules/user/actions/index.js","modules/tetris/actions/index.js","modules/snake/actions/index.js","modules/main/actions/index.js"],"names":["handleActions","name","authorize","loginFlow","noop","user","password","call","token","put","action","loginSuccess","loginFailure","cancelled","loginCancel","take","fork","authorization","type","cancel","userSagas","all","ms","Promise","res","setTimeout","selectCompletedRow","removeCompletedRow","manageCompletedRows","checkFigureMoveLeft","checkFigureMoveRight","checkFigureRotate","figureFlow","figures","game","row","rowIndex","race","pause","delay","sleep","rowCount","select","selector","getSpeed","speed","modificator","rows","i","length","canFigureMoveLeft","moveFigureLeft","canFigureMoveRight","moveFigureRight","canFigureRotate","rotateFigure","takeEvery","getFallInterval","interval","moveDown","canFigureMoveDown","getCurrentFigure","currentFigure","collideFigure","fallFigureDown","console","log","finishGame","setCurrentFigure","setNextFigure","fall","collision","getCompletedRows","completedRows","stop","finish","tetrisSagas","tetrisFlow","allowedMoves","isAllowedDirection","prev","next","allowedDirections","Error","includes","flattenGrid","flatten","grid","snake","snakeCells","getCells","filtered","filter","c1","some","c2","haveSameCoordinates","randomCell","sample","paint","setState","movement","applesLoop","apple","getIncrementInterval","playerMove","doesSnakeEatApple","eatApple","getDirection","prevDirection","nextDirection","payload","moveSnake","direction","isSnakeColliding","getBody","generateApple","spawnApple","snakeSagas","snakeFlow","rootSaga","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleWare","createSagaMiddleWare","staticReducers","createReducer","asyncReducers","combineReducers","store","createStore","applyMiddleware","inject","key","reducer","replaceReducer","run","ProgressBar","className","PageLoader","Header","title","ENV_PREFIX","HomePage","React","lazy","a","home","Tetris","tetrisReducer","default","tetris","Snake","snakeReducer","renderRoot","to","renderHome","renderTetris","renderSnake","MainRouter","basename","Suspense","fallback","path","render","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","times","f","n","g","state","getGrid","createSelector","figure","current","getNextFigure","getScore","score","getGameState","gameState","getGridCells","figureCells","map","tr","cell","commonCell","find","c","getState","nextFigureGrid","getSize","height","gridW","width","gridH","createGrid","setPosition","Math","floor","reduce","acc","every","isFilled","config","x","isGameStarted","canAdjustSpeed","getCoordinates","col","rotate","getApple","body","isAppleCell","color","getColor","isColliding","move","generateNextCell","getHead","min","init","max","cols","createClearRow","columns","y","Array","keys","consCell","createIndeterminateRow","completedRow","canHome","defaultProps","coordinatesByDirection","up","right","down","left","coordinates","moveTo","getNext","generateNextCoordinates","checkCell","isCell","value","JSON","stringify","String","getCol","getRow","getContent","content","cons","isArray","Number","isInteger","cells","forEach","checkCells","col1","row1","col2","row2","loginRequest","createAction","logout","startGame","stopGame","pauseGame","resumeGame","increaseGameSpeed","decreaseGameSpeed","tryFigureDown","moveFigureDown","tryFigureLeft","tryFigureRight","tryRotateFigure","spawnSnake","checkSnakeMove"],"mappings":"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","file":"static/js/main.5ac356fc.chunk.js","sourcesContent":["import { handleActions } from 'redux-actions';\n\nconst init = {\n  name: 'Mystery Stranger',\n};\n\nexport default handleActions({}, init);\n","import {\n  put,\n  take,\n  call,\n  fork,\n  cancel,\n  cancelled,\n} from 'redux-saga/effects';\nimport * as action from 'modules/main/actions';\n\nconst noop = () => null;\n\nfunction* authorize(user, password) {\n  try {\n    const token = yield call(noop, user, password);\n    yield put(action.user.loginSuccess(token));\n    yield call(noop, { token });\n    return token;\n  } catch (e) {\n    yield put(action.user.loginFailure(e));\n    return e;\n  } finally {\n    if (yield cancelled()) {\n      put(action.user.loginCancel());\n    }\n  }\n}\n\nexport default function* loginFlow() {\n  while (true) {\n    const { user, password } = yield take('USER/LOGIN/REQUEST');\n\n    const authorization = yield fork(authorize, user, password);\n    const { type } = yield take(['USER/LOGOUT', 'USER/LOGIN/FAILURE']);\n    if (type === 'USER/LOGOUT') {\n      yield cancel(authorization);\n    }\n    yield call(noop, 'token');\n  }\n}\n","import { all } from 'redux-saga/effects';\nimport loginFlow from './loginFlow';\n\nexport default function* userSagas() {\n  yield all([\n    loginFlow(),\n  ]);\n}\n","export default ms => new Promise((res) => {\n  setTimeout(res, ms);\n});\n","import {\n  put,\n  take,\n  call,\n  select,\n  race,\n  takeEvery,\n} from 'redux-saga/effects';\nimport * as action from 'modules/main/actions';\nimport * as selector from 'modules/main/selectors';\nimport sleep from 'libs/sleep';\n\nfunction* selectCompletedRow(row) {\n  yield put(action.tetris.selectCompletedRow({ rowIndex: row }));\n  const { pause } = yield race({\n    pause: take('TETRIS/GAME/PAUSE'),\n    delay: call(sleep, 200),\n  });\n  if (pause) {\n    yield take('TETRIS/GAME/RESUME');\n  }\n}\n\nfunction* removeCompletedRow(row, rowCount) {\n  const speed = yield select(selector.tetris.getSpeed);\n  yield put(action.tetris.removeCompletedRow({ rowIndex: row, modificator: rowCount * speed }));\n  const { pause } = yield race({\n    pause: take('TETRIS/GAME/PAUSE'),\n    delay: call(sleep, 100),\n  });\n  if (pause) {\n    yield take('TETRIS/GAME/RESUME');\n  }\n}\n\nfunction* manageCompletedRows(rows) {\n  for (let i = 0; i < rows.length; i += 1) {\n    yield call(selectCompletedRow, rows[i]);\n    yield call(removeCompletedRow, rows[i], rows.length);\n  }\n}\n\nfunction* checkFigureMoveLeft() {\n  if (yield select(selector.tetris.canFigureMoveLeft)) {\n    yield put(action.tetris.moveFigureLeft());\n  }\n}\nfunction* checkFigureMoveRight() {\n  if (yield select(selector.tetris.canFigureMoveRight)) {\n    yield put(action.tetris.moveFigureRight());\n  }\n}\nfunction* checkFigureRotate() {\n  if (yield select(selector.tetris.canFigureRotate)) {\n    yield put(action.tetris.rotateFigure());\n  }\n}\n\nfunction* figureFlow() {\n  yield takeEvery('TETRIS/FIGURE/TRY/LEFT', checkFigureMoveLeft);\n  yield takeEvery('TETRIS/FIGURE/TRY/RIGHT', checkFigureMoveRight);\n  yield takeEvery('TETRIS/FIGURE/TRY/ROTATE', checkFigureRotate);\n  while (true) {\n    try {\n      const interval = yield select(selector.tetris.getFallInterval);\n      const { pause } = yield race({\n        delay: call(sleep, interval),\n        pause: take('TETRIS/GAME/PAUSE'),\n        moveDown: take('TETRIS/FIGURE/TRY/DOWN'),\n      });\n      if (pause) {\n        yield take('TETRIS/GAME/RESUME');\n      }\n      if (!(yield select(selector.tetris.canFigureMoveDown))) {\n        const currentFigure = yield select(selector.tetris.getCurrentFigure);\n        const speed = yield select(selector.tetris.getSpeed);\n        yield put(action.tetris.collideFigure({ currentFigure, speed }));\n      }\n      yield put(action.tetris.fallFigureDown());\n    } catch (e) {\n      console.log(e);\n      yield put(action.tetris.finishGame());\n    }\n  }\n}\n\nfunction* figures() {\n  while (true) {\n    yield put(action.tetris.setCurrentFigure());\n    yield put(action.tetris.setNextFigure());\n    if (!(yield select(selector.tetris.canFigureMoveDown))) {\n      yield put(action.tetris.finishGame());\n    }\n    yield race({\n      fall: call(figureFlow),\n      collision: take('TETRIS/FIGURE/COLLIDE'),\n    });\n    const completedRows = yield select(selector.tetris.getCompletedRows);\n    yield call(manageCompletedRows, completedRows);\n  }\n}\n\nexport default function* game() {\n  while (true) {\n    yield take('TETRIS/GAME/START');\n    yield race({\n      figures: call(figures),\n      stop: take('TETRIS/GAME/STOP'),\n      finish: take('TETRIS/GAME/FINISH'),\n    });\n  }\n}\n","import { all } from 'redux-saga/effects';\nimport tetrisFlow from './tetrisFlow';\n\nexport default function* tetrisSagas() {\n  yield all([\n    tetrisFlow(),\n  ]);\n}\n","const allowedMoves = {\n  'up': ['left', 'right', 'up'],\n  'right': ['up', 'down', 'right'],\n  'down': ['left', 'right', 'down'],\n  'left': ['up', 'down', 'left'],\n};\n\nexport default function isAllowedDirection(prev, next) {\n  const allowedDirections = allowedMoves[prev];\n  if (!allowedDirections) {\n    throw new Error(`Wrong direction, IS_ALLOWED_DIRECTION: ${prev}`);\n  }\n  return allowedDirections.includes(next);\n}\n","import sample from 'lodash/sample';\nimport flatten from 'lodash/flatten';\nimport { haveSameCoordinates, setState, paint } from 'libs/cell';\nimport grid from '../constants/snakeGrid';\n\nconst flattenGrid = flatten(grid);\n\nexport default (snake) => {\n  const snakeCells = snake.getCells();\n  const filtered = flattenGrid\n    .filter(c1 => !snakeCells.some(c2 => haveSameCoordinates(c1, c2)));\n\n  const randomCell = sample(filtered);\n  return paint(\n    setState(randomCell, 'filled'),\n    'green',\n  );\n};\n","import {\n  put,\n  take,\n  call,\n  select,\n  race,\n} from 'redux-saga/effects';\nimport * as action from 'modules/main/actions';\nimport * as selector from 'modules/main/selectors';\nimport sleep from 'libs/sleep';\nimport isAllowedDirection from '../libs/isAllowedDirection';\nimport generateApple from '../libs/generateApple';\n\nfunction* movement(apple) {\n  while (true) {\n    try {\n      const interval = yield select(selector.snake.getIncrementInterval);\n      const { pause, playerMove } = yield race({\n        delay: call(sleep, interval),\n        pause: take('SNAKE/GAME/PAUSE'),\n        playerMove: take('SNAKE/BODY/CHECK/MOVE'),\n      });\n\n      if (pause) {\n        yield take('SNAKE/GAME/RESUME');\n      }\n\n      // snake eats apple\n      if (yield select(selector.snake.doesSnakeEatApple)) {\n        yield put(action.snake.eatApple({ apple }));\n        return;\n      }\n\n      const prevDirection = yield select(selector.snake.getDirection);\n      const nextDirection = playerMove ? playerMove.payload : prevDirection;\n\n      // moved to not allowed direction\n      if (isAllowedDirection(prevDirection, nextDirection)) {\n        yield put(action.snake.moveSnake({ direction: nextDirection }));\n      } else {\n        yield put(action.snake.moveSnake({ direction: prevDirection }));\n      }\n\n      // snake collides after move\n      if (yield select(selector.snake.isSnakeColliding)) {\n        yield put(action.snake.finishGame());\n      }\n    } catch (e) {\n      console.log(e);\n      yield put(action.snake.finishGame());\n    }\n  }\n}\n\nfunction* applesLoop() {\n  while (true) {\n    const snake = yield select(selector.snake.getBody);\n    const apple = generateApple(snake);\n    yield put(action.snake.spawnApple({ apple }));\n    yield call(movement, apple);\n  }\n}\n\nexport default function* game() {\n  while (true) {\n    yield take('SNAKE/GAME/START');\n    yield race({\n      applesLoop: call(applesLoop),\n      stop: take('SNAKE/GAME/STOP'),\n      finish: take('SNAKE/GAME/FINISH'),\n    });\n  }\n}\n","import { all } from 'redux-saga/effects';\nimport snakeFlow from './snakeFlow';\n\nexport default function* snakeSagas() {\n  yield all([\n    snakeFlow(),\n  ]);\n}\n","import { all } from 'redux-saga/effects';\nimport userSagas from 'modules/user/sagas';\nimport tetrisSagas from 'modules/tetris/sagas';\nimport snakeSagas from 'modules/snake/sagas';\n\nexport default function* rootSaga() {\n  yield all([\n    userSagas(),\n    tetrisSagas(),\n    snakeSagas(),\n  ]);\n}\n","import {\n  compose,\n  applyMiddleware,\n  createStore,\n  combineReducers,\n} from 'redux';\nimport createSagaMiddleWare from 'redux-saga';\n\nimport user from 'modules/user/reducers';\nimport rootSaga from 'modules/main/sagas';\n\n// eslint-disable-next-line no-underscore-dangle\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst sagaMiddleWare = createSagaMiddleWare();\nconst staticReducers = {\n  user,\n};\n\nconst createReducer = asyncReducers => combineReducers({\n  ...staticReducers,\n  ...asyncReducers,\n});\n\nconst store = createStore(\n  createReducer(),\n  composeEnhancers(applyMiddleware(sagaMiddleWare)),\n);\n\nstore.asyncReducers = {};\nstore.inject = (key, reducer) => {\n  store.asyncReducers[key] = reducer;\n  store.replaceReducer(createReducer(store.asyncReducers));\n};\n\nsagaMiddleWare.run(rootSaga);\n\nexport default store;\n","import React from 'react';\nimport './styles.css';\n\nexport default function ProgressBar() {\n  return (\n    <div className=\"progress-bar-container\">\n      <div className=\"progress-bar\">\n        <div className=\"progress-bar__indicator\" />\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport Header from 'modules/common/components/Header';\nimport ProgressBar from 'modules/common/components/ProgressBar';\n\nexport default function PageLoader() {\n  return (\n    <>\n      <Header title=\"Loading...\" />\n      <ProgressBar />\n    </>\n  );\n}\n","export const isDev = process.env.NODE_ENV !== 'production';\r\n\r\nexport const ENV_PREFIX = isDev ? '' : '/osg';\r\n","import React from 'react';\nimport store from 'store';\nimport sleep from 'libs/sleep';\nimport { isDev } from 'constants/environment';\n\nexport const HomePage = React.lazy(async () => {\n  const [home] = await Promise.all([\n    import(/* webpackChunkName: \"home\" */ 'modules/home/components/HomePage'),\n    sleep(isDev ? 0 : 1000),\n  ]);\n  return home;\n});\n\nexport const Tetris = React.lazy(async () => {\n  const [\n    { default: tetrisReducer },\n    tetris,\n  ] = await Promise.all([\n    import(/* webpackChunkName: \"tetris-reducer\" */ 'modules/tetris/reducers'),\n    import(/* webpackChunkName: \"tetris\" */ 'modules/tetris/containers/Root'),\n    sleep(isDev ? 0 : 1000),\n  ]);\n  store.inject('tetris', tetrisReducer);\n  return tetris;\n});\n\nexport const Snake = React.lazy(async () => {\n  const [\n    { default: snakeReducer },\n    snake,\n  ] = await Promise.all([\n    import(/* webpackChunkName: \"snake-reducer\" */ 'modules/snake/reducers'),\n    import(/* webpackChunkName: \"snake\" */ 'modules/snake/containers/Root'),\n    sleep(isDev ? 0 : 1000),\n  ]);\n  store.inject('snake', snakeReducer);\n  return snake;\n});\n","import React from 'react';\nimport {\n  HashRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from 'react-router-dom';\nimport PageLoader from 'modules/common/components/PageLoader';\nimport { ENV_PREFIX } from 'constants/environment';\nimport { HomePage, Tetris, Snake } from './LazyRoutes';\n\nconst renderRoot = () => <Redirect to=\"/home\" />;\nconst renderHome = () => <HomePage />;\nconst renderTetris = () => <Tetris />;\nconst renderSnake = () => <Snake />;\n\nexport default function MainRouter() {\n  return (\n    <Router basename={ENV_PREFIX}>\n      <React.Suspense fallback={<PageLoader />}>\n        <Switch>\n          <Route path=\"/home\" render={renderHome} />\n          <Route path=\"/tetris\" render={renderTetris} />\n          <Route path=\"/snake\" render={renderSnake} />\n          <Route render={renderRoot} />\n        </Switch>\n      </React.Suspense>\n    </Router>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// had to use common css for better performance\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport store from 'store';\nimport MainRouter from 'modules/main/components/MainRouter';\nimport './App.css';\n\nexport default function App() {\n  return (\n    <Provider store={store}>\n      <MainRouter />\n    </Provider>\n  );\n}\n","const compose = (f, g) => (...args) => g(f(...args));\n\nconst times = (f, n) => {\n  if (n > 1) {\n    return compose(f, times(f, n - 1));\n  }\n  return f;\n};\n\nexport default times;\n","import { createSelector } from 'reselect';\nimport { createGrid } from 'libs/createGrid';\nimport {\n  getCoordinates,\n  haveSameCoordinates,\n  getState,\n  isFilled,\n} from 'libs/cell';\nimport times from 'libs/times';\nimport config from '../constants/config';\n\nexport const tetris = state => state.tetris;\nexport const getGrid = createSelector(tetris, tetris => tetris.grid);\nexport const getCurrentFigure = createSelector(tetris, tetris => tetris.figure.current);\nexport const getNextFigure = createSelector(tetris, tetris => tetris.figure.next);\nexport const getSpeed = createSelector(tetris, tetris => tetris.speed);\nexport const getScore = createSelector(tetris, tetris => tetris.score);\nexport const getGameState = createSelector(tetris, tetris => tetris.gameState);\n\n// add current figure on grid\nexport const getGridCells = createSelector(\n  [getGrid, getCurrentFigure],\n  (grid, figure) => {\n    if (figure) {\n      const figureCells = figure.getCells();\n      return grid.map(tr => tr.map((cell) => {\n        const commonCell = figureCells.find(c => haveSameCoordinates(c, cell));\n        if (commonCell) {\n          return getState(commonCell);\n        }\n        return getState(cell);\n      }));\n    }\n    return grid.map(tr => tr.map(getState));\n  },\n);\n\nexport const nextFigureGrid = createSelector(\n  getNextFigure,\n  (figure) => {\n    if (!figure) {\n      return [];\n    }\n    const { height, width } = figure.getSize();\n    const gridW = width + 2;\n    const gridH = height + 2;\n    const grid = createGrid(gridW, gridH);\n    const figureCells = figure.setPosition(Math.floor(gridW / 2), 1).getCells();\n    return grid.map(tr => tr.map((cell) => {\n      const commonCell = figureCells.find(c => haveSameCoordinates(c, cell));\n      if (commonCell) {\n        return getState(commonCell);\n      }\n      return getState(cell);\n    }));\n  },\n);\n\nexport const getCompletedRows = createSelector(\n  getGrid,\n  grid => grid.reduce((acc, row, i) => {\n    if (row.every(c => isFilled(c))) {\n      return [...acc, i];\n    }\n    return acc;\n  }, []),\n);\n\nconst { speed: { modificator }, interval } = config;\nexport const getFallInterval = createSelector(\n  getSpeed,\n  // increase speed for 30% every time we add speed\n  speed => times(x => modificator * x, speed - 1)(interval),\n);\n\nexport const isGameStarted = createSelector(\n  getGameState,\n  state => state === 'started',\n);\n\nexport const canAdjustSpeed = createSelector(\n  getGameState,\n  state => (state === 'initial' || state === 'finished'),\n);\n\n// figure collision predicate\nexport const canFigureMoveDown = createSelector(\n  [getGrid, getCurrentFigure],\n  (grid, figure) => figure && figure\n    .getCells()\n    .every((cell) => {\n      const [col, row] = getCoordinates(cell);\n      return row !== grid.length - 1 && !isFilled(grid[row + 1][col]);\n    }),\n);\n\nexport const canFigureMoveLeft = createSelector(\n  [getGrid, getCurrentFigure],\n  (grid, figure) => figure && figure\n    .getCells()\n    .every((cell) => {\n      const [col, row] = getCoordinates(cell);\n      return col !== 0 && !isFilled(grid[row][col - 1]);\n    }),\n);\n\nexport const canFigureMoveRight = createSelector(\n  [getGrid, getCurrentFigure],\n  (grid, figure) => figure && figure\n    .getCells()\n    .every((cell) => {\n      const [col, row] = getCoordinates(cell);\n      return col !== grid[row].length - 1 && !isFilled(grid[row][col + 1]);\n    }),\n);\n\nexport const canFigureRotate = createSelector(\n  [getGrid, getCurrentFigure],\n  (grid, figure) => figure && figure\n    .rotate()\n    .getCells()\n    .every((cell) => {\n      const [col, row] = getCoordinates(cell);\n      // outside top or bottom\n      if (row < 0 || row > grid.length - 1) {\n        return false;\n      }\n      // outside left or right\n      if (col < 0 || col > grid[row].length - 1) {\n        return false;\n      }\n      // will collide with active grid cells\n      return !isFilled(grid[row][col]);\n    }),\n);\n","import { createSelector } from 'reselect';\nimport {\n  haveSameCoordinates,\n  getState,\n  getColor,\n} from 'libs/cell';\nimport times from 'libs/times';\nimport config from '../constants/config';\nimport grid from '../constants/snakeGrid';\nimport generateNextCell from '../libs/generateNextCell';\n\nexport const snake = state => state.snake;\nexport const getGameState = createSelector(snake, snake => snake.gameState);\nexport const getApple = createSelector(snake, snake => snake.apple);\nexport const getSpeed = createSelector(snake, snake => snake.speed);\nexport const getBody = createSelector(snake, snake => snake.body);\nexport const getDirection = createSelector(snake, snake => snake.direction);\n\nexport const getGridCells = createSelector(\n  [getApple, getBody],\n  (apple, snake) => {\n    if (snake) {\n      const snakeCells = snake.getCells();\n      return grid.map(tr => tr.map((cell) => {\n        const commonCell = snakeCells.find(c => haveSameCoordinates(c, cell));\n        const isAppleCell = apple && haveSameCoordinates(cell, apple);\n        if (commonCell) {\n          return {\n            state: getState(commonCell),\n            color: getColor(commonCell),\n          };\n        }\n        if (isAppleCell) {\n          return {\n            state: getState(apple),\n            color: getColor(apple),\n          };\n        }\n        return { state: getState(cell) };\n      }));\n    }\n    return grid.map(tr => tr.map(cell => ({ state: getState(cell) })));\n  },\n);\n\nconst { speed: { modificator }, interval } = config;\nexport const getIncrementInterval = createSelector(\n  getSpeed,\n  // increase speed for 30% every time we add speed\n  speed => times(x => modificator * x, speed - 1)(interval),\n);\n\nexport const isSnakeColliding = createSelector(\n  getBody,\n  snake => snake.isColliding(),\n);\n\nexport const doesSnakeEatApple = createSelector(\n  [getBody, getApple, getDirection],\n  (snake, apple, direction) => snake\n    .move(generateNextCell(snake.getHead(), direction))\n    .getCells()\n    .some(c => haveSameCoordinates(c, apple)),\n);\n","import * as tetris from 'modules/tetris/selectors';\nimport * as snake from 'modules/snake/selectors';\nimport * as user from 'modules/user/selectors';\n\nexport { tetris, snake, user };\n","export default {\n  speed: {\n    min: 1,\n    init: 4,\n    max: 10,\n    modificator: 0.7,\n  },\n  interval: 1000,\n  score: {},\n  grid: {\n    cols: 10,\n    rows: 20,\n  },\n};\n","import { createGrid } from 'libs/createGrid';\nimport config from './config';\n\nconst { grid: { rows, cols } } = config;\n\nexport default createGrid(cols, rows);\n","import { cons as consCell } from './cell';\n\nexport const createClearRow = (columns, y) => {\n  return [...Array(columns).keys()].map(x => consCell([x, y], { state: 'empty' }));\n};\n\nexport const createIndeterminateRow = (columns, y) => {\n  return [...Array(columns).keys()].map(x => consCell([x, y], { state: 'indeterminate' }));\n};\n\nexport const createGrid = (columns, rows) => {\n  return [...Array(rows).keys()].map(y => createClearRow(columns, y));\n};\n","export default {\n  speed: {\n    min: 1,\n    init: 4,\n    max: 10,\n    modificator: 0.7,\n  },\n  interval: 1000,\n  score: {\n    collision: 1,\n    completedRow: 5,\n  },\n  grid: {\n    cols: 10,\n    rows: 20,\n  },\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport './styles.css';\n\nexport default function Header({ title, canHome }) {\n  return (\n    <header className=\"header\">\n      <div className=\"header-content\">\n        <h1 className=\"main-logo\">{title}</h1>\n        {canHome && <Link to=\"/home\" className=\"header__nav-link header__nav-link--home\">Home</Link>}\n      </div>\n    </header>\n  );\n}\n\nHeader.defaultProps = {\n  title: '',\n  canHome: false,\n};\n\nHeader.propTypes = {\n  title: PropTypes.string.isRequired,\n  canHome: PropTypes.bool,\n};\n","import { getCoordinates, moveTo } from 'libs/cell';\nimport config from '../constants/config';\n\nconst { grid } = config;\n\nconst coordinatesByDirection = {\n  up: ([col, row]) => ([\n    col,\n    row === 0 ? grid.rows - 1 : row - 1,\n  ]),\n  right: ([col, row]) => ([\n    (col + 1) % grid.cols,\n    row,\n  ]),\n  down: ([col, row]) => ([\n    col,\n    (row + 1) % grid.rows,\n  ]),\n  left: ([col, row]) => ([\n    col === 0 ? grid.cols - 1 : col - 1,\n    row,\n  ]),\n};\n\nfunction generateNextCoordinates(coordinates, direction) {\n  const getNext = coordinatesByDirection[direction];\n  if (!getNext) {\n    throw new Error(`Invalid direction - GENERATE_NEXT_COORDINATES: ${direction}`);\n  }\n  return getNext(coordinates);\n}\n\nexport default (cell, direction) => {\n  const coordinates = getCoordinates(cell);\n\n  return moveTo(cell, generateNextCoordinates(coordinates, direction));\n};\n","// =============================\n// CELL CONSRUCTOR AND SELECTORS\n// =============================\n\n// is cell predicate\nexport const isCell = cell => (typeof cell === 'object' && cell !== null && cell.isCell);\n\n// check cell for selectors and operations\nconst checkCell = (cell) => {\n  if (!isCell(cell)) {\n    const value = typeof cell === 'object' ? JSON.stringify(cell, null, 2) : String(cell);\n    throw new Error(`Argument must be cell, but it was '${value}'`);\n  }\n};\nconst checkCells = (...cells) => cells.forEach((c) => {\n  checkCell(c);\n});\n\n// selector for coordinates array of cell\nexport const getCoordinates = (cell) => {\n  checkCell(cell);\n  return cell.coordinates;\n};\n\n// selector for horizontal coordinate of cell\nexport const getCol = cell => getCoordinates(cell)[0];\n\n// selector vertical coordinate of cell\nexport const getRow = cell => getCoordinates(cell)[1];\n\n\n// selector for cell id\nexport const getId = (cell) => {\n  checkCell(cell);\n  return getRow(cell) * 10 + getCol(cell);\n};\n\n// selector for cell state value\nexport const getState = (cell) => {\n  checkCell(cell);\n  return cell.state;\n};\n\n// selector for cell color color\nexport const getColor = (cell) => {\n  checkCell(cell);\n  return cell.color;\n};\n\n// selector for cell content\nexport const getContent = (cell) => {\n  checkCell(cell);\n  return cell.content;\n};\n\n// construct cell\nexport const cons = (coordinates, {\n  state = 'empty',\n  color = 'black',\n  content = null,\n} = {}) => {\n  if (!Array.isArray(coordinates)) {\n    const value = typeof coordinates === 'object'\n      ? JSON.stringify(coordinates, null, 2)\n      : String(coordinates);\n\n    throw new Error(`First argument must be an array of coordinates but it was ${value}`);\n  }\n\n  const [col, row] = coordinates;\n  if (!Number.isInteger(col) || !Number.isInteger(row)) {\n    throw new Error(\n      `Coordinates must be array of integers,\n      but it was [${col} : ${typeof col}, ${row} : ${typeof row}]`,\n    );\n  }\n\n  return {\n    coordinates: [col, row],\n    state,\n    color,\n    content,\n    isCell: true,\n  };\n};\n\n// =====================\n// OPERATIONS WITH CELLS\n// =====================\n\n// is cell active predicate\nexport const isFilled = cell => getState(cell) === 'filled';\n\n// check same coordinates operation\nexport const haveSameCoordinates = (c1, c2) => {\n  checkCells(c1, c2);\n  const [col1, row1] = getCoordinates(c1);\n  const [col2, row2] = getCoordinates(c2);\n  return col1 === col2 && row1 === row2;\n};\n\n// convert cell to string operation\nexport const toString = (cell) => {\n  checkCell(cell);\n  return `coorinates: [${getCol(cell)}, ${getRow(cell)}], ` +\n    `state: ${getState(cell)}, color: ${getColor(cell)}, content: ${getContent(cell)}`;\n};\n\n// get cell moved down operation\nexport const moveDown = (cell) => {\n  checkCell(cell);\n  return cons([getCol(cell), getRow(cell) + 1], {\n    state: getState(cell),\n    color: getColor(cell),\n    content: getContent(cell),\n  });\n};\n\nexport const moveTo = (cell, coordinates) => {\n  checkCell(cell);\n  return cons(coordinates, {\n    state: getState(cell),\n    color: getColor(cell),\n    content: getContent(cell),\n  });\n};\n\nexport const setState = (cell, state) => {\n  checkCell(cell);\n  return cons(getCoordinates(cell), {\n    state,\n    color: getColor(cell),\n    content: getContent(cell),\n  });\n};\n\n// get cell painted with color operation\nexport const paint = (cell, color) => {\n  checkCell(cell);\n  return cons(getCoordinates(cell), {\n    state: getState(cell),\n    color,\n    content: getContent(cell),\n  });\n};\n","import { createAction } from 'redux-actions';\n\n// LOGIN FLOW\nexport const loginRequest = createAction('USER/LOGIN/REQUEST');\nexport const loginSuccess = createAction('USER/LOGIN/SUCCESS');\nexport const loginFailure = createAction('USER/LOGIN/FAILURE');\nexport const loginCancel = createAction('USER/LOGIN/CANCEL');\nexport const logout = createAction('USER/LOGOUT');\n","import { createAction } from 'redux-actions';\n\n// GAME FLOW\nexport const startGame = createAction('TETRIS/GAME/START');\nexport const stopGame = createAction('TETRIS/GAME/STOP');\nexport const pauseGame = createAction('TETRIS/GAME/PAUSE');\nexport const resumeGame = createAction('TETRIS/GAME/RESUME');\nexport const finishGame = createAction('TETRIS/GAME/FINISH');\n\nexport const increaseGameSpeed = createAction('TETRIS/GAME/SPEED/INCREASE');\nexport const decreaseGameSpeed = createAction('TETRIS/GAME/SPEED/DECREASE');\n\n// GRID\nexport const selectCompletedRow = createAction('TETRIS/ROW/COMPLETED/SELECT');\nexport const removeCompletedRow = createAction('TETRIS/ROW/COMPLETED/REMOVE');\n\n// FIGURES\nexport const setCurrentFigure = createAction('TETRIS/FIGURE/CURRENT/SET');\nexport const setNextFigure = createAction('TETRIS/FIGURE/NEXT/SET');\n\n// FIGURE FLOW\nexport const fallFigureDown = createAction('TETRIS/FIGURE/FALL/DOWN');\nexport const collideFigure = createAction('TETRIS/FIGURE/COLLIDE');\n\nexport const tryFigureDown = createAction('TETRIS/FIGURE/TRY/DOWN');\nexport const moveFigureDown = createAction('TETRIS/FIGURE/MOVE/DOWN');\n\nexport const tryFigureLeft = createAction('TETRIS/FIGURE/TRY/LEFT');\nexport const moveFigureLeft = createAction('TETRIS/FIGURE/MOVE/LEFT');\n\nexport const tryFigureRight = createAction('TETRIS/FIGURE/TRY/RIGHT');\nexport const moveFigureRight = createAction('TETRIS/FIGURE/MOVE/RIGHT');\n\nexport const tryRotateFigure = createAction('TETRIS/FIGURE/TRY/ROTATE');\nexport const rotateFigure = createAction('TETRIS/FIGURE/ROTATE');\n","import { createAction } from 'redux-actions';\n\n// GAME FLOW\nexport const startGame = createAction('SNAKE/GAME/START');\nexport const stopGame = createAction('SNAKE/GAME/STOP');\nexport const pauseGame = createAction('SNAKE/GAME/PAUSE');\nexport const resumeGame = createAction('SNAKE/GAME/RESUME');\nexport const finishGame = createAction('SNAKE/GAME/FINISH');\n\nexport const increaseGameSpeed = createAction('SNAKE/GAME/SPEED/INCREASE');\nexport const decreaseGameSpeed = createAction('SNAKE/GAME/SPEED/DECREASE');\n\n// APPLE\nexport const spawnApple = createAction('SNAKE/APPLE/SPAWN');\nexport const eatApple = createAction('SNAKE/APPLE/EAT');\n\n// SNAKE FLOW\nexport const spawnSnake = createAction('SNAKE/BODY/SPAWN');\n\nexport const moveSnake = createAction('SNAKE/BODY/MOVE');\nexport const checkSnakeMove = createAction('SNAKE/BODY/CHECK/MOVE');\n","import * as user from 'modules/user/actions';\nimport * as tetris from 'modules/tetris/actions';\nimport * as snake from 'modules/snake/actions';\n\nexport {\n  user,\n  tetris,\n  snake,\n};\n"],"sourceRoot":""}