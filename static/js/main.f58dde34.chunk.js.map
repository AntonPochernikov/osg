{"version":3,"sources":["libs/times.js","selectors/tetris.js","selectors/index.js","constants/config.js","components/common/Header.jsx","libs/createField.js","reducers/user/index.js","sagas/loginFlow.js","libs/delay.js","sagas/tetrisFlow.js","sagas/index.js","store/store.js","components/common/ProgressBar.jsx","components/common/PageLoader.jsx","components/router/LazyRoutes.js","components/router/MainRouter.jsx","constants/environment.js","serviceWorker.js","index.js","App.jsx","libs/cell.js","actions/tetris.js","actions/user.js","actions/index.js"],"names":["times","f","n","g","apply","arguments","compose","getBoard","state","tetris","board","getCurrentFigure","figure","current","getNextFigure","next","getSpeed","speed","getGameState","gameState","getBoardCells","createSelector","figureCells","getCells","map","tr","cell","commonCell","find","c","haveSameCoordinates","getState","getNextFigurePreview","_figure$getSize","getSize","height","boardW","width","boardH","createField","setPosition","Math","floor","getCompletedRows","reduce","acc","row","i","every","isFilled","concat","Object","toConsumableArray","modificator","tetrisConfig","interval","getFallInterval","x","isGameStarted","canAdjustSpeed","canFigureMoveDown","_getCoordinates","getCoordinates","_getCoordinates2","slicedToArray","col","length","canFigureMoveLeft","_getCoordinates3","_getCoordinates4","canFigureMoveRight","_getCoordinates5","_getCoordinates6","canFigureRotate","rotate","_getCoordinates7","_getCoordinates8","__webpack_require__","d","__webpack_exports__","tetris_namespaceObject","min","init","max","score","collision","completedRow","cols","rows","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","react_router_dom__WEBPACK_IMPORTED_MODULE_1__","Header","_ref","title","canHome","a","createElement","className","to","defaultProps","createClearRow","createIndeterminateRow","_cell_js__WEBPACK_IMPORTED_MODULE_0__","columns","y","push","consCell","field","handleActions","name","authorize","loginFlow","noop","user","password","token","regenerator_default","wrap","_context","prev","call","sent","put","action","loginSuccess","abrupt","t0","loginFailure","cancelled","loginCancel","finish","stop","_marked","authorization","_ref2","_context2","take","fork","type","cancel","_marked2","delay","ms","Promise","res","setTimeout","selectCompletedRow","removeCompletedRow","manageCompletedRows","checkFigureMoveLeft","checkFigureMoveRight","checkFigureRotate","figureFlow","figures","game","rowIndex","race","pause","tetrisFlow_marked","rowCount","select","selector","tetrisFlow_marked2","_context3","_marked3","_context4","moveFigureLeft","_marked4","_context5","moveFigureRight","_marked5","_context6","rotateFigure","_marked6","_ref3","currentFigure","_speed","_context7","takeEvery","moveDown","collideFigure","fallFigureDown","console","log","finishGame","_marked7","completedRows","_context8","setCurrentFigure","setNextFigure","fall","_marked8","_context9","_marked9","rootSaga","all","tetrisFlow","sagas_marked","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","sagaMiddleWare","createSagaMiddleWare","staticReducers","createReducer","asyncReducers","combineReducers","objectSpread","store","createStore","applyMiddleware","inject","key","reducer","replaceReducer","run","ProgressBar","react_default","PageLoader","components_common_ProgressBar","Tetris","React","lazy","asyncToGenerator","mark","_callee","tetrisReducer","e","then","bind","default","HomePage","_callee2","_ref5","_ref6","home","renderRoot","react_router","renderTetris","renderHome","MainRouter","react_router_dom","basename","Suspense","fallback","common_PageLoader","path","render","Boolean","location","hostname","match","ReactDOM","es","components_router_MainRouter","document","getElementById","navigator","serviceWorker","ready","registration","unregister","checkCell","isCell","value","JSON","stringify","String","Error","coordinates","getCol","getRow","getColor","color","getContent","content","cons","undefined","Array","isArray","_coordinates","C_Users_Admin_Desktop_osg_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","Number","isInteger","c1","c2","_len","cells","_key","forEach","checkCells","col1","row1","col2","row2","startGame","createAction","stopGame","pauseGame","resumeGame","increaseGameSpeed","decreaseGameSpeed","tryFigureDown","moveFigureDown","tryFigureLeft","tryFigureRight","tryRotateFigure","loginRequest","logout","user_namespaceObject"],"mappings":"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","file":"static/js/main.f58dde34.chunk.js","sourcesContent":["const compose = (f, g) => (...args) => g(f(...args));\n\nconst times = (f, n) => {\n  if (n > 1) {\n    return compose(f, times(f, n - 1));\n  }\n  return f;\n};\n\nexport default times;\n","import { createSelector } from 'reselect';\r\nimport { createField } from 'libs/createField.js';\r\nimport {\r\n  getCoordinates,\r\n  haveSameCoordinates,\r\n  getState,\r\n  isFilled,\r\n} from 'libs/cell.js';\r\nimport times from 'libs/times.js';\r\nimport { tetrisConfig } from 'constants/config.js';\r\n\r\nexport const getBoard = state => state.tetris.board;\r\nexport const getCurrentFigure = state => state.tetris.figure.current;\r\nexport const getNextFigure = state => state.tetris.figure.next;\r\nexport const getSpeed = state => state.tetris.speed;\r\nexport const getGameState = state => state.tetris.gameState;\r\n\r\n// add current figure on board\r\nexport const getBoardCells = createSelector(\r\n  [getBoard, getCurrentFigure],\r\n  (board, figure) => {\r\n    if (figure) {\r\n      const figureCells = figure.getCells();\r\n      return board.map(tr => tr.map((cell) => {\r\n        const commonCell = figureCells.find(c => haveSameCoordinates(c, cell));\r\n        if (commonCell) {\r\n          return getState(commonCell);\r\n        }\r\n        return getState(cell);\r\n      }));\r\n    }\r\n    return board.map(tr => tr.map(cell => getState(cell)));\r\n  },\r\n);\r\n\r\nexport const getNextFigurePreview = createSelector(\r\n  getNextFigure,\r\n  (figure) => {\r\n    if (!figure) {\r\n      return [];\r\n    }\r\n    const { height, width } = figure.getSize();\r\n    const boardW = width + 2;\r\n    const boardH = height + 2;\r\n    const board = createField(boardW, boardH);\r\n    const figureCells = figure.setPosition(Math.floor(boardW / 2), 1).getCells();\r\n    return board.map(tr => tr.map((cell) => {\r\n      const commonCell = figureCells.find(c => haveSameCoordinates(c, cell));\r\n      if (commonCell) {\r\n        return getState(commonCell);\r\n      }\r\n      return getState(cell);\r\n    }));\r\n  },\r\n);\r\n\r\nexport const getCompletedRows = createSelector(\r\n  getBoard,\r\n  board => board.reduce((acc, row, i) => {\r\n    if (row.every(c => isFilled(c))) {\r\n      return [...acc, i];\r\n    }\r\n    return acc;\r\n  }, []),\r\n);\r\n\r\nconst { speed: { modificator }, interval } = tetrisConfig;\r\nexport const getFallInterval = createSelector(\r\n  getSpeed,\r\n  // increase speed for 30% every time we add speed\r\n  speed => times(x => modificator * x, speed - 1)(interval),\r\n);\r\n\r\nexport const isGameStarted = createSelector(\r\n  getGameState,\r\n  state => state === 'started',\r\n);\r\n\r\nexport const canAdjustSpeed = createSelector(\r\n  getGameState,\r\n  state => (state === 'initial' || state === 'finished'),\r\n);\r\n\r\n// figure collision predicate\r\nexport const canFigureMoveDown = createSelector(\r\n  [getBoard, getCurrentFigure],\r\n  (board, figure) => figure && figure\r\n    .getCells()\r\n    .every((cell) => {\r\n      const [col, row] = getCoordinates(cell);\r\n      return row !== board.length - 1 && !isFilled(board[row + 1][col]);\r\n    }),\r\n);\r\n\r\nexport const canFigureMoveLeft = createSelector(\r\n  [getBoard, getCurrentFigure],\r\n  (board, figure) => figure && figure\r\n    .getCells()\r\n    .every((cell) => {\r\n      const [col, row] = getCoordinates(cell);\r\n      return col !== 0 && !isFilled(board[row][col - 1]);\r\n    }),\r\n);\r\n\r\nexport const canFigureMoveRight = createSelector(\r\n  [getBoard, getCurrentFigure],\r\n  (board, figure) => figure && figure\r\n    .getCells()\r\n    .every((cell) => {\r\n      const [col, row] = getCoordinates(cell);\r\n      return col !== board[row].length - 1 && !isFilled(board[row][col + 1]);\r\n    }),\r\n);\r\n\r\nexport const canFigureRotate = createSelector(\r\n  [getBoard, getCurrentFigure],\r\n  (board, figure) => figure && figure\r\n    .rotate()\r\n    .getCells()\r\n    .every((cell) => {\r\n      const [col, row] = getCoordinates(cell);\r\n      // outside top or bottom\r\n      if (row < 0 || row > board.length - 1) {\r\n        return false;\r\n      }\r\n      // outside left or right\r\n      if (col < 0 || col > board[row].length - 1) {\r\n        return false;\r\n      }\r\n      // will collide with active board cells\r\n      return !isFilled(board[row][col]);\r\n    }),\r\n);\r\n","import * as tetris from './tetris.js';\n\nexport { tetris };\n","export const tetrisConfig = {\r\n  speed: {\r\n    min: 1,\r\n    init: 4,\r\n    max: 10,\r\n    modificator: 0.7,\r\n  },\r\n  interval: 1000,\r\n  score: {\r\n    collision: 1,\r\n    completedRow: 5,\r\n  },\r\n  board: {\r\n    cols: 10,\r\n    rows: 20,\r\n  },\r\n};\r\n\r\nexport const snakeConfig = {};\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport './Header.css';\n\nconst Header = ({ title, canHome }) => (\n  <header className=\"header\">\n    <div className=\"header-content\">\n      <h1 className=\"main-logo\">{title}</h1>\n      {canHome && <Link to=\"/home\" className=\"header__nav-link header__nav-link--home\">Home</Link>}\n    </div>\n  </header>\n);\n\nHeader.defaultProps = {\n  title: '',\n  canHome: false,\n};\n\nHeader.propTypes = {\n  title: PropTypes.string.isRequired,\n  canHome: PropTypes.bool,\n};\n\nexport default Header;\n","import { cons as consCell } from './cell.js';\n\nexport const createClearRow = (columns, y) => {\n  const row = [];\n  for (let x = 0; x < columns; x += 1) {\n    row.push(consCell([x, y], 'empty'));\n  }\n  return row;\n};\n\nexport const createIndeterminateRow = (columns, y) => {\n  const row = [];\n  for (let x = 0; x < columns; x += 1) {\n    row.push(consCell([x, y], 'indeterminate'));\n  }\n  return row;\n};\n\nexport const createField = (columns, rows) => {\n  const field = [];\n  for (let y = 0; y < rows; y += 1) {\n    field.push(createClearRow(columns, y));\n  }\n  return field;\n};\n","import { handleActions } from 'redux-actions';\n\nconst init = {\n  name: 'Mystery Stranger',\n};\n\nexport default handleActions({}, init);\n","import {\n  put,\n  take,\n  call,\n  fork,\n  cancel,\n  cancelled,\n} from 'redux-saga/effects';\nimport * as action from 'actions';\n\nconst noop = () => null;\n\nfunction* authorize(user, password) {\n  try {\n    const token = yield call(noop, user, password);\n    yield put(action.user.loginSuccess(token));\n    yield call(noop, { token });\n    return token;\n  } catch (e) {\n    yield put(action.user.loginFailure(e));\n    return e;\n  } finally {\n    if (yield cancelled()) {\n      put(action.user.loginCancel());\n    }\n  }\n}\n\nexport default function* loginFlow() {\n  while (true) {\n    const { user, password } = yield take('USER/LOGIN/REQUEST');\n\n    const authorization = yield fork(authorize, user, password);\n    const { type } = yield take(['USER/LOGOUT', 'USER/LOGIN/FAILURE']);\n    if (type === 'USER/LOGOUT') {\n      yield cancel(authorization);\n    }\n    yield call(noop, 'token');\n  }\n}\n","export default ms => new Promise((res) => {\n  setTimeout(res, ms);\n});\n","import {\n  put,\n  take,\n  call,\n  select,\n  race,\n  takeEvery,\n} from 'redux-saga/effects';\nimport * as action from 'actions';\nimport * as selector from 'selectors';\nimport delay from 'libs/delay.js';\n\nfunction* selectCompletedRow(row) {\n  yield put(action.tetris.selectCompletedRow({ rowIndex: row }));\n  const { pause } = yield race({\n    pause: take('TETRIS/GAME/PAUSE'),\n    delay: call(delay, 200),\n  });\n  if (pause) {\n    yield take('TETRIS/GAME/RESUME');\n  }\n}\n\nfunction* removeCompletedRow(row, rowCount) {\n  const speed = yield select(selector.tetris.getSpeed);\n  yield put(action.tetris.removeCompletedRow({ rowIndex: row, modificator: rowCount * speed }));\n  const { pause } = yield race({\n    pause: take('TETRIS/GAME/PAUSE'),\n    delay: call(delay, 100),\n  });\n  if (pause) {\n    yield take('TETRIS/GAME/RESUME');\n  }\n}\n\nfunction* manageCompletedRows(rows) {\n  for (let i = 0; i < rows.length; i += 1) {\n    yield call(selectCompletedRow, rows[i]);\n    yield call(removeCompletedRow, rows[i], rows.length);\n  }\n}\n\nfunction* checkFigureMoveLeft() {\n  if (yield select(selector.tetris.canFigureMoveLeft)) {\n    yield put(action.tetris.moveFigureLeft());\n  }\n}\nfunction* checkFigureMoveRight() {\n  if (yield select(selector.tetris.canFigureMoveRight)) {\n    yield put(action.tetris.moveFigureRight());\n  }\n}\nfunction* checkFigureRotate() {\n  if (yield select(selector.tetris.canFigureRotate)) {\n    yield put(action.tetris.rotateFigure());\n  }\n}\n\nfunction* figureFlow() {\n  yield takeEvery('TETRIS/FIGURE/TRY/LEFT', checkFigureMoveLeft);\n  yield takeEvery('TETRIS/FIGURE/TRY/RIGHT', checkFigureMoveRight);\n  yield takeEvery('TETRIS/FIGURE/TRY/ROTATE', checkFigureRotate);\n  while (true) {\n    try {\n      const interval = yield select(selector.tetris.getFallInterval);\n      const { pause } = yield race({\n        delay: call(delay, interval),\n        pause: take('TETRIS/GAME/PAUSE'),\n        moveDown: take('TETRIS/FIGURE/TRY/DOWN'),\n      });\n      if (pause) {\n        yield take('TETRIS/GAME/RESUME');\n      }\n      if (!(yield select(selector.tetris.canFigureMoveDown))) {\n        const currentFigure = yield select(selector.tetris.getCurrentFigure);\n        const speed = yield select(selector.tetris.getSpeed);\n        yield put(action.tetris.collideFigure({ currentFigure, speed }));\n      }\n      yield put(action.tetris.fallFigureDown());\n    } catch (e) {\n      console.log(e);\n      yield put(action.tetris.finishGame());\n    }\n  }\n}\n\nfunction* figures() {\n  while (true) {\n    yield put(action.tetris.setCurrentFigure());\n    yield put(action.tetris.setNextFigure());\n    if (!(yield select(selector.tetris.canFigureMoveDown))) {\n      yield put(action.tetris.finishGame());\n    }\n    yield race({\n      fall: call(figureFlow),\n      collision: take('TETRIS/FIGURE/COLLIDE'),\n    });\n    const completedRows = yield select(selector.tetris.getCompletedRows);\n    yield call(manageCompletedRows, completedRows);\n  }\n}\n\nexport default function* game() {\n  while (true) {\n    yield take('TETRIS/GAME/START');\n    yield race({\n      figures: call(figures),\n      stop: take('TETRIS/GAME/STOP'),\n      finish: take('TETRIS/GAME/FINISH'),\n    });\n  }\n}\n","import { all } from 'redux-saga/effects';\nimport loginFlow from './loginFlow.js';\nimport tetrisFlow from './tetrisFlow.js';\n\nexport default function* rootSaga() {\n  yield all([\n    loginFlow(),\n    tetrisFlow(),\n  ]);\n}\n","import {\n  compose,\n  applyMiddleware,\n  createStore,\n  combineReducers,\n} from 'redux';\nimport createSagaMiddleWare from 'redux-saga';\n\nimport user from 'reducers/user';\nimport rootSaga from 'sagas';\n\n// eslint-disable-next-line no-underscore-dangle\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst sagaMiddleWare = createSagaMiddleWare();\nconst staticReducers = {\n  user,\n};\n\nconst createReducer = asyncReducers => combineReducers({\n  ...staticReducers,\n  ...asyncReducers,\n});\n\nconst store = createStore(\n  createReducer(),\n  composeEnhancers(applyMiddleware(sagaMiddleWare)),\n);\n\nstore.asyncReducers = {};\nstore.inject = (key, reducer) => {\n  store.asyncReducers[key] = reducer;\n  store.replaceReducer(createReducer(store.asyncReducers));\n};\n\nsagaMiddleWare.run(rootSaga);\n\nexport default store;\n","import React from 'react';\nimport './ProgressBar.css';\n\nconst ProgressBar = () => (\n  <div className=\"progress-bar-container\">\n    <div className=\"progress-bar\">\n      <div className=\"progress-bar__indicator\" />\n    </div>\n  </div>\n);\n\nexport default ProgressBar;\n","import React from 'react';\nimport Header from './Header.jsx';\nimport ProgressBar from './ProgressBar.jsx';\n\nconst PageLoader = () => [\n  <Header key=\"header\" title=\"Loading...\" />,\n  <ProgressBar key=\"progress\" />,\n];\n\nexport default PageLoader;\n","import React from 'react';\nimport store from 'store/store.js';\nimport delay from 'libs/delay.js';\nimport { isDev } from 'constants/environment.js';\n\nexport const Tetris = React.lazy(async () => {\n  const [\n    { default: tetrisReducer },\n    tetris,\n  ] = await Promise.all([\n    import(/* webpackChunkName: \"tetris-reducer\" */ 'reducers/tetris/index.js'),\n    import(/* webpackChunkName: \"tetris\" */ 'components/tetris/Tetris.js'),\n    delay(isDev ? 0 : 1000),\n  ]);\n  store.inject('tetris', tetrisReducer);\n  return tetris;\n});\n\nexport const HomePage = React.lazy(async () => {\n  const [home] = await Promise.all([\n    import(/* webpackChunkName: \"home\" */ 'components/home/HomePage.jsx'),\n    delay(isDev ? 0 : 1000),\n  ]);\n  return home;\n});\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from 'react-router-dom';\nimport './MainRouter.css';\nimport PageLoader from 'components/common/PageLoader.jsx';\nimport { ENV_PREFIX } from 'constants/environment.js';\nimport { Tetris, HomePage } from './LazyRoutes.js';\n\nconst renderRoot = () => <Redirect to=\"/home\" />;\nconst renderTetris = () => <Tetris />;\nconst renderHome = () => <HomePage />;\n\nconst MainRouter = () => (\n  <Router basename={ENV_PREFIX}>\n    <React.Suspense fallback={<PageLoader />}>\n      <Switch>\n        <Route path=\"/tetris\" render={renderTetris} />\n        <Route path=\"/home\" render={renderHome} />\n        <Route render={renderRoot} />\n      </Switch>\n    </React.Suspense>\n  </Router>\n);\n\nexport default MainRouter;\n","export const isDev = process.env.NODE_ENV !== 'production';\r\n\r\nexport const ENV_PREFIX = isDev ? '' : '/osg';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker.js';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport store from './store/store.js';\nimport './App.css';\nimport MainRouter from './components/router/MainRouter.jsx';\n\nexport default function App() {\n  return (\n    <Provider store={store}>\n      <MainRouter />\n    </Provider>\n  );\n}\n","// =============================\n// CELL CONSRUCTOR AND SELECTORS\n// =============================\n\n// is cell predicate\nexport const isCell = cell => (typeof cell === 'object' && cell !== null && cell.isCell);\n\n// check cell for selectors and operations\nconst checkCell = (cell) => {\n  if (!isCell(cell)) {\n    const value = typeof cell === 'object' ? JSON.stringify(cell, null, 2) : String(cell);\n    throw new Error(`Argument must be cell, but it was '${value}'`);\n  }\n};\nconst checkCells = (...cells) => cells.forEach((c) => {\n  checkCell(c);\n});\n\n// selector for coordinates array of cell\nexport const getCoordinates = (cell) => {\n  checkCell(cell);\n  return cell.coordinates;\n};\n\n// selector for horizontal coordinate of cell\nexport const getCol = cell => getCoordinates(cell)[0];\n\n// selector vertical coordinate of cell\nexport const getRow = cell => getCoordinates(cell)[1];\n\n\n// selector for cell id\nexport const getId = (cell) => {\n  checkCell(cell);\n  return getRow(cell) * 10 + getCol(cell);\n};\n\n// selector for cell state value\nexport const getState = (cell) => {\n  checkCell(cell);\n  return cell.state;\n};\n\n// selector for cell color color\nexport const getColor = (cell) => {\n  checkCell(cell);\n  return cell.color;\n};\n\n// selector for cell content\nexport const getContent = (cell) => {\n  checkCell(cell);\n  return cell.content;\n};\n\n// construct cell\nexport const cons = (coordinates, state = 'empty', color = 'black', content = null) => {\n  if (!Array.isArray(coordinates)) {\n    const value = typeof coordinates === 'object'\n      ? JSON.stringify(coordinates, null, 2)\n      : String(coordinates);\n\n    throw new Error(`First argument must be an array of coordinates but it was ${value}`);\n  }\n\n  const [col, row] = coordinates;\n  if (!Number.isInteger(col) || !Number.isInteger(row)) {\n    throw new Error(`Coordinates must be array of integers, but it was [${col} : ${typeof col}, ${row} : ${typeof row}]`);\n  }\n\n  return {\n    coordinates: [col, row],\n    state,\n    color,\n    content,\n    isCell: true,\n  };\n};\n\n// =====================\n// OPERATIONS WITH CELLS\n// =====================\n\n// is cell active predicate\nexport const isFilled = cell => getState(cell) === 'filled';\n\n// check same coordinates operation\nexport const haveSameCoordinates = (c1, c2) => {\n  checkCells(c1, c2);\n  const [col1, row1] = getCoordinates(c1);\n  const [col2, row2] = getCoordinates(c2);\n  return col1 === col2 && row1 === row2;\n};\n\n// convert cell to string operation\nexport const toString = (cell) => {\n  checkCell(cell);\n  return `coorinates: [${getCol(cell)}, ${getRow(cell)}], ` +\n    `state: ${getState(cell)}, color: ${getColor(cell)}, content: ${getContent(cell)}`;\n};\n\n// get cell moved down operation\nexport const moveDown = (cell) => {\n  checkCell(cell);\n  return cons(\n    [getCol(cell), getRow(cell) + 1],\n    getState(cell),\n    getColor(cell),\n    getContent(cell),\n  );\n};\n\n// get cell painted with color operation\nexport const paint = (cell, color) => {\n  checkCell(cell);\n  return cons(\n    getCoordinates(cell),\n    getState(cell),\n    color,\n    getContent(cell),\n  );\n};\n","import { createAction } from 'redux-actions';\n\n// GAME FLOW\nexport const startGame = createAction('TETRIS/GAME/START');\nexport const stopGame = createAction('TETRIS/GAME/STOP');\nexport const pauseGame = createAction('TETRIS/GAME/PAUSE');\nexport const resumeGame = createAction('TETRIS/GAME/RESUME');\nexport const finishGame = createAction('TETRIS/GAME/FINISH');\n\nexport const increaseGameSpeed = createAction('TETRIS/GAME/SPEED/INCREASE');\nexport const decreaseGameSpeed = createAction('TETRIS/GAME/SPEED/DECREASE');\n\n// BOARD\nexport const selectCompletedRow = createAction('TETRIS/ROW/COMPLETED/SELECT');\nexport const removeCompletedRow = createAction('TETRIS/ROW/COMPLETED/REMOVE');\n\n// FIGURES\nexport const setCurrentFigure = createAction('TETRIS/FIGURE/CURRENT/SET');\nexport const setNextFigure = createAction('TETRIS/FIGURE/NEXT/SET');\n\n// FIGURE FLOW\nexport const fallFigureDown = createAction('TETRIS/FIGURE/FALL/DOWN');\nexport const collideFigure = createAction('TETRIS/FIGURE/COLLIDE');\n\nexport const tryFigureDown = createAction('TETRIS/FIGURE/TRY/DOWN');\nexport const moveFigureDown = createAction('TETRIS/FIGURE/MOVE/DOWN');\n\nexport const tryFigureLeft = createAction('TETRIS/FIGURE/TRY/LEFT');\nexport const moveFigureLeft = createAction('TETRIS/FIGURE/MOVE/LEFT');\n\nexport const tryFigureRight = createAction('TETRIS/FIGURE/TRY/RIGHT');\nexport const moveFigureRight = createAction('TETRIS/FIGURE/MOVE/RIGHT');\n\nexport const tryRotateFigure = createAction('TETRIS/FIGURE/TRY/ROTATE');\nexport const rotateFigure = createAction('TETRIS/FIGURE/ROTATE');\n","import { createAction } from 'redux-actions';\n\n// LOGIN FLOW\nexport const loginRequest = createAction('USER/LOGIN/REQUEST');\nexport const loginSuccess = createAction('USER/LOGIN/SUCCESS');\nexport const loginFailure = createAction('USER/LOGIN/FAILURE');\nexport const loginCancel = createAction('USER/LOGIN/CANCEL');\nexport const logout = createAction('USER/LOGOUT');\n","import * as tetris from './tetris.js';\nimport * as user from './user.js';\n\nexport { tetris, user };\n"],"sourceRoot":""}