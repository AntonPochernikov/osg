{"version":3,"sources":["modules/snake/libs/Snake.js","modules/snake/reducers/index.js"],"names":["Snake","cells","this","length","cell","getCells","head","h","getHead","tail","some","c","haveSameCoordinates","initial","config","speed","init","min","max","grid","cols","rows","gameState","handleActions","action","startGame","stopGame","finishGame","pauseGame","resumeGame","increaseGameSpeed","state","decreaseGameSpeed","apple","spawnApple","_","payload","eatApple","body","consCell","Math","floor","color","moveSnake","prevSnake","direction","move","generateNextCell","eat","paint","map","setState","combineReducers"],"mappings":"uMAOqBA,E,WACnB,WAAYC,GAAQ,oBAClBC,KAAKD,MAAQA,E,wDAIb,OAAOC,KAAKD,MAAME,S,0BAGhBC,GACF,OAAO,IAAIJ,EAAJ,CAAWI,GAAX,mBAAoBF,KAAKG,gB,iCAIhC,OAAOH,KAAKD,Q,gCAIZ,OAAOK,eAAKJ,KAAKD,S,oCAIjB,IAAMM,EAAIL,KAAKM,UACf,OAAOC,eAAKP,KAAKD,OAAOS,KAAK,SAAAC,GAAC,OAAIC,YAAoBD,EAAGJ,O,2BAGtDH,GACH,OAAO,IAAIJ,EAAJ,CAAWI,GAAX,mBAAoBS,kBAAQX,KAAKD,c,eCvBxCa,IAFFC,MAASC,E,EAAAA,KAAMC,E,EAAAA,IAAKC,E,EAAAA,I,EAElBJ,IADFK,KAAQC,E,EAAAA,KAAMC,E,EAAAA,KAGVC,EAAYC,aAAa,mBAC5BC,IAAaC,UAAY,iBAAM,YADH,cAE5BD,IAAaE,SAAW,iBAAM,YAFF,cAG5BF,IAAaG,WAAa,iBAAM,aAHJ,cAI5BH,IAAaI,UAAY,iBAAM,WAJH,cAK5BJ,IAAaK,WAAa,iBAAM,YALJ,GAM5B,WAEGd,EAAQQ,aAAa,mBACxBC,IAAaM,kBAAoB,SAAAC,GAAK,OAAKA,IAAUb,EAAMa,EAAQA,EAAQ,IADnD,cAExBP,IAAaQ,kBAAoB,SAAAD,GAAK,OAAKA,IAAUd,EAAMc,EAAQA,EAAQ,IAFnD,GAGxBf,GAEGiB,EAAQV,aAAa,mBACxBC,IAAaU,WAAa,SAACC,EAAD,YAAMC,QAAWH,QADnB,cAExBT,IAAaa,SAAW,kBAAM,OAFN,cAGxBb,IAAaE,SAAW,kBAAM,OAHN,GAIxB,MAEGY,EAAOf,aAAa,mBAEvBC,IAAaC,UAAY,kBAAM,IAAIzB,EAAM,CACxCuC,YAAS,CAACC,KAAKC,MAAMrB,EAAO,GAAIC,EAAO,GAAI,CAAEU,MAAO,SAAUW,MAAO,WACrEH,YAAS,CAACC,KAAKC,MAAMrB,EAAO,GAAIC,EAAO,GAAI,CAAEU,MAAO,SAAUW,MAAO,WACrEH,YAAS,CAACC,KAAKC,MAAMrB,EAAO,GAAIC,EAAO,GAAI,CAAEU,MAAO,SAAUW,MAAO,WACrEH,YAAS,CAACC,KAAKC,MAAMrB,EAAO,GAAIC,EAAO,GAAI,CAAEU,MAAO,SAAUW,MAAO,WACrEH,YAAS,CAACC,KAAKC,MAAMrB,EAAO,GAAIC,EAAO,GAAI,CAAEU,MAAO,SAAUW,MAAO,eAP/C,cASvBlB,IAAamB,UAAY,SAACC,EAAD,OAAyBC,EAAzB,EAAcT,QAAWS,UAAzB,OAA2CD,EAAUE,KAC7EC,YAAiBH,EAAUpC,UAAWqC,MAVhB,cAYvBrB,IAAaa,SAAW,SAACO,EAAD,OAAyBX,EAAzB,EAAcG,QAAWH,MAAzB,OAAuCW,EAAUI,IACxEC,YAAMhB,EAAO,aAbS,cAevBT,IAAaE,SAAW,kBAAM,OAfP,cAgBvBF,IAAaG,WAAa,SAACiB,GAAD,OAAe,IAAI5C,EAC5C4C,EAAUvC,WAAW6C,IAAI,SAAA9C,GAAI,OAAI+C,YAAS/C,EAAM,sBAjB1B,GAmBvB,MAEGyC,EAAYtB,aAAa,mBAC5BC,IAAaC,UAAY,iBAAM,OADH,cAE5BD,IAAaE,SAAW,kBAAM,OAFF,cAG5BF,IAAaG,WAAa,kBAAM,OAHJ,cAI5BH,IAAamB,UAAY,SAACR,EAAD,YAAMC,QAAWS,YAJd,GAK5B,MAEYO,sBAAgB,CAC7B9B,YACAgB,OACAO,YACAZ,QACAlB","file":"static/js/snake-reducer.92df794d.chunk.js","sourcesContent":["import {\n  initial,\n  head,\n  tail,\n} from 'lodash';\nimport { haveSameCoordinates } from 'libs/cell';\n\nexport default class Snake {\n  constructor(cells) {\n    this.cells = cells;\n  }\n\n  getLength() {\n    return this.cells.length;\n  }\n\n  eat(cell) {\n    return new Snake([cell, ...this.getCells()]);\n  }\n\n  getCells() {\n    return this.cells;\n  }\n\n  getHead() {\n    return head(this.cells);\n  }\n\n  isColliding() {\n    const h = this.getHead();\n    return tail(this.cells).some(c => haveSameCoordinates(c, h));\n  }\n\n  move(cell) {\n    return new Snake([cell, ...initial(this.cells)])\n  }\n}\n","import { combineReducers } from 'redux';\nimport { handleActions } from 'redux-actions';\nimport * as action from 'modules/main/actions';\nimport { cons as consCell, setState, paint } from 'libs/cell';\nimport config from '../constants/config';\nimport Snake from '../libs/Snake';\nimport generateNextCell from '../libs/generateNextCell';\n\nconst {\n  speed: { init, min, max },\n  grid: { cols, rows },\n} = config;\n\nconst gameState = handleActions({\n  [action.snake.startGame]: () => 'started',\n  [action.snake.stopGame]: () => 'initial',\n  [action.snake.finishGame]: () => 'finished',\n  [action.snake.pauseGame]: () => 'paused',\n  [action.snake.resumeGame]: () => 'started',\n}, 'initial');\n\nconst speed = handleActions({\n  [action.snake.increaseGameSpeed]: state => (state === max ? state : state + 1),\n  [action.snake.decreaseGameSpeed]: state => (state === min ? state : state - 1),\n}, init);\n\nconst apple = handleActions({\n  [action.snake.spawnApple]: (_, { payload: { apple } }) => apple,\n  [action.snake.eatApple]: () => null,\n  [action.snake.stopGame]: () => null,\n}, null);\n\nconst body = handleActions({\n  // TODO: generate snake\n  [action.snake.startGame]: () => new Snake([\n    consCell([Math.floor(cols / 2), rows - 6], { state: 'filled', color: 'yellow' }),\n    consCell([Math.floor(cols / 2), rows - 5], { state: 'filled', color: 'yellow' }),\n    consCell([Math.floor(cols / 2), rows - 4], { state: 'filled', color: 'yellow' }),\n    consCell([Math.floor(cols / 2), rows - 3], { state: 'filled', color: 'yellow' }),\n    consCell([Math.floor(cols / 2), rows - 2], { state: 'filled', color: 'yellow' }),\n  ]),\n  [action.snake.moveSnake]: (prevSnake, { payload: { direction } }) => prevSnake.move(\n    generateNextCell(prevSnake.getHead(), direction),\n  ),\n  [action.snake.eatApple]: (prevSnake, { payload: { apple } }) => prevSnake.eat(\n    paint(apple, 'yellow')\n  ),\n  [action.snake.stopGame]: () => null,\n  [action.snake.finishGame]: (prevSnake) => new Snake(\n    prevSnake.getCells().map(cell => setState(cell, 'indeterminate')),\n  ),\n}, null);\n\nconst direction = handleActions({\n  [action.snake.startGame]: () => 'up',\n  [action.snake.stopGame]: () => null,\n  [action.snake.finishGame]: () => null,\n  [action.snake.moveSnake]: (_, { payload: { direction } }) => direction,\n}, null);\n\nexport default combineReducers({\n  gameState,\n  body,\n  direction,\n  apple,\n  speed,\n});\n"],"sourceRoot":""}